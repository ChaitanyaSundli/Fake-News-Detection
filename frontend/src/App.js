import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import './App.css';
import { Loader2 } from 'lucide-react';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

export default function App() {
  const [step, setStep] = useState(0);
  const [selectedModel, setSelectedModel] = useState('bilstm');
  const [training, setTraining] = useState(false);
  const [trainingImages, setTrainingImages] = useState([]);
  const [selectedChart, setSelectedChart] = useState('roc_curve');
  const [logLines, setLogLines] = useState([]);
  const [useLiveTraining, setUseLiveTraining] = useState(true);
  const [userInput, setUserInput] = useState('');
  const [predictionResult, setPredictionResult] = useState(null);
  const handleDownload = () => {
    if (!predictionResult) return;
  
    const logo = new Image();
    logo.src = `${window.location.origin}/logo.png`;
  
    logo.onload = () => {
      const pdf = new jsPDF('landscape', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
  
      pdf.setFillColor(255, 255, 255);
      pdf.rect(10, 10, pageWidth - 20, 190, 'F'); // background
  
      // Logo + Title
      pdf.addImage(logo, 'PNG', pageWidth / 2 - 20, 20, 40, 40);
      pdf.setFontSize(22);
      pdf.setTextColor('#00ffff');
      pdf.text('News Veritas - Verification Certificate', pageWidth / 2, 75, { align: 'center' });
  
      // Prediction info
      const conf = (predictionResult.confidence * 100).toFixed(2);
      const fake = (predictionResult.fake_probability * 100).toFixed(2);
      const real = (predictionResult.real_probability * 100).toFixed(2);
  
      pdf.setFontSize(16);
      pdf.setTextColor('#000000');
      pdf.text(`Article Status: ${predictionResult.prediction}`, pageWidth / 2, 90, { align: 'center' });
      pdf.text(`Confidence: ${conf}%`, pageWidth / 2, 100, { align: 'center' });
      pdf.text(`(Fake: ${fake}% | Real: ${real}%)`, pageWidth / 2, 108, { align: 'center' });
      pdf.text(`Verified on: ${new Date().toLocaleString()}`, pageWidth / 2, 116, { align: 'center' });
  
      // Article text
      pdf.setFontSize(12);
      pdf.text('Verified Text:', 20, 135);
      const splitText = pdf.splitTextToSize(predictionResult.processed_text || userInput, pageWidth - 40);
      pdf.text(splitText, 20, 143);
  
      // Footer
      pdf.setTextColor('#888');
      pdf.text('Generated by Fake News Detector AI Engine', pageWidth / 2, 190, { align: 'center' });
  
      pdf.save('News_Verification_Certificate.pdf');
      alert('‚úÖ Certificate downloaded successfully!');
    };
  };


  useEffect(() => {
    fetch('https://fake-news-detection-fcr3.onrender.com/setup')
      .then((res) => res.json())
      .then((data) => {
        console.log('Setup complete:', data);
        setStep(1);
      })
      .catch((err) => console.error('Setup error:', err));
  }, []);

  const handleTrain = async () => {
    setTraining(true);
    setStep(2);

    if (useLiveTraining) {
      const eventSource = new EventSource(`https://fake-news-detection-fcr3.onrender.com/stream-training?model=${selectedModel}`);
      eventSource.onmessage = (e) => {
        const line = e.data;

        if (
          line.includes("Epoch") ||
          line.includes("Training Loss:") ||
          line.includes("Validation Loss:") ||
          line.includes("Validation Accuracy:") ||
          line.includes("ROC-AUC") ||
          line.includes("F1") ||
          line.includes("Cost-Benefit Analysis:")
        ) {
          setLogLines((prev) => [...prev, line]);
        }

        if (
          line.includes("Training complete") ||
          line.includes("ROC-AUC") ||
          line.includes("Saved vectorizer word_index")
        ) {
          eventSource.close();
          fetch('https://fake-news-detection-fcr3.onrender.com/metrics')
            .then(res => res.json())
            .then(metrics => {
              setTrainingImages(metrics.images);
              setStep(3);
            });
        }
      };

      eventSource.onerror = (err) => {
        console.error("Stream error:", err);
        eventSource.close();
        setTraining(false);
      };
    } else {
      try {
        const response = await fetch('', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ model: selectedModel })
        });
        const data = await response.json();
        console.log('Training complete:', data);

        const metricsRes = await fetch('https://fake-news-detection-fcr3.onrender.com/metrics');
        const metrics = await metricsRes.json();
        setTrainingImages(metrics.images);
        setStep(3);
      } catch (error) {
        console.error('Training error:', error);
        setTraining(false);
      }
    }
  };

  const handleChartChange = (e) => {
    setSelectedChart(e.target.value);
  };

  return (
    <div className="container">
      
      <motion.div className="branding">
        <img src="/logo.png" alt="Logo" className="logo" />
        <h1 className="brand-name">NewsVeritas</h1>
      </motion.div>

      <motion.div className="card">
        <motion.h1 className="title">üõ†Ô∏è Training Wizard</motion.h1>

        {step === 0 && (
          <motion.div className="status">
            <Loader2 className="spinner" />
            Loading dataset and initializing backend...
          </motion.div>
        )}

        {step === 1 && (
          <motion.div className="step">
            <h2>Step 2: Choose Model</h2>
            <select
              value={selectedModel}
              onChange={(e) => setSelectedModel(e.target.value)}
              className="select"
            >
              <option value="bilstm">BiLSTM + Attention</option>
              <option value="cnn">TextCNN</option>
              <option value="lstm">Regular LSTM</option>
            </select>

            <div className="select" style={{ marginTop: '1rem' }}>
              <label>
                <input
                  type="radio"
                  name="trainingMode"
                  checked={useLiveTraining}
                  onChange={() => setUseLiveTraining(true)}
                />{' '}
                Live Training Logs
              </label>
              <br />
              <label>
                <input
                  type="radio"
                  name="trainingMode"
                  checked={!useLiveTraining}
                  onChange={() => setUseLiveTraining(false)}
                />{' '}
                Instant Result
              </label>
            </div>

            <button onClick={handleTrain} className="btn-green">
              Start Training
            </button>
          </motion.div>
        )}

        {step === 2 && (
          <motion.div className="step">
            <p>Training your <strong>{selectedModel}</strong> model...</p>
            {useLiveTraining ? (
              <div className="terminal-loader">
                <pre>
                  {logLines.map((line, idx) => (
                    <div key={idx}>{line}</div>
                  ))}
                </pre>
              </div>
            ) : (
              <Loader2 className="spinner big" />
            )}
          </motion.div>
        )}

        {step === 3 && (
          <motion.div className="step">
            <h2>üìä Training Visualizations</h2>
            <div className="chart-selector">
              <label htmlFor="chart-select">Select Chart:</label>
              <select id="chart-select" value={selectedChart} onChange={handleChartChange} className="select">
                <option value="roc_curve">ROC Curve</option>
                {trainingImages.map((img) => {
                  const chartName = img
                    .split('.')[0]
                    .replace(/_/g, ' ')
                    .replace(/\b\w/g, (char) => char.toUpperCase());
                  return (
                    <option key={img} value={img}>{chartName}</option>
                  );
                })}
              </select>
            </div>

            <div className="image-grid">
              
              {trainingImages.map((img, idx) => (
                img.includes(selectedChart) && (
                  <img
                    key={idx}
                    src={`https://fake-news-detection-fcr3.onrender.com/static/${img}`}
                    alt={img}
                    className="chart"
                    onError={(e) => console.error(`Image failed to load: ${img}`, e)}
                  />
                )
              ))}
            </div>

            <button onClick={() => { setTrainingImages([]); setStep(1); setLogLines([]); }} className="btn-purple">
              üîÑ Reset Wizard
            </button>

            <button onClick={() => setStep(4)} className="btn-green">
              üß† Try a Prediction
            </button>
          </motion.div>
        )}

        {step === 4 && (
          <motion.div className="step">
            <h2>üß† Try a Prediction</h2>
            <textarea
              rows="5"
              className="select"
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              placeholder="Enter a news article..."
            />

            <div className="example-buttons">
              <button onClick={() => setUserInput("Breaking: The president has signed a new executive order...")}>Example 1</button>
              <button onClick={() => setUserInput("NASA confirms Earth has two moons!")}>Example 2</button>
            </div>
            

            <button
              className="btn-green"
              onClick={async () => {
                try {
                  const res = await fetch('https://fake-news-detection-fcr3.onrender.com/predict', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ text: userInput })
                  });
                  const data = await res.json();

                  if (res.ok) {
                    setPredictionResult(data);
                  } else {
                    alert(data.error || "Prediction failed.");
                    setPredictionResult(null);
                  }
                } catch (err) {
                  alert("Failed to connect to the backend.");
                  console.error(err);
                }
              }}
            >
              üîç Predict
            </button>
            


            {predictionResult && (
              
              <motion.div
                className="result-card"
                style={{ backgroundColor: predictionResult.confidence > 0.85 ? '#dcfce7' : predictionResult.confidence > 0.6 ? '#fef9c3' : '#fee2e2' }}
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
              >
                <h3 className={predictionResult.prediction === 'FAKE' ? 'text-red' : 'text-green'}>
                  {predictionResult.prediction === 'FAKE' ? 'üö® FAKE NEWS DETECTED' : '‚úÖ REAL NEWS'}
                </h3>
                <p><strong>Confidence:</strong> {(predictionResult.confidence * 100).toFixed(2)}%</p>
                <p className="subtext">
                  (Fake: {(predictionResult.fake_probability * 100).toFixed(2)}% | Real: {(predictionResult.real_probability * 100).toFixed(2)}%)
                </p>
                {predictionResult.negation_detected && (
                  <p className="subtext">‚ö†Ô∏è Detected <strong>{predictionResult.negation_count}</strong> negation word(s).</p>
                )}
                {predictionResult.processed_text && (
                  <p className="subtext">üîç Processed Text: {predictionResult.processed_text}</p>
                )}
                
              </motion.div>
              
            )}
            <button className="btn-purple" onClick={handleDownload}>
              üéì Download Verification Certificate
            </button>
            <button
  className="btn-green"
  onClick={() => {
    setUserInput('');
    setPredictionResult(null);
  }}
>
  üßπ Clear Result
</button>
            <button onClick={() => {
            setStep(1);
            setUserInput('');
            setPredictionResult(null);
            }}className="btn-purple">
            üîÅ Back to Start
            </button>

          </motion.div>
        )}
      </motion.div>
    </div>
  );
}
