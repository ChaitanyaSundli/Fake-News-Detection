import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import './App.css';
import { Loader2 } from 'lucide-react';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

export default function App() {
  const backendUrl = "https://fake-news-detection-fcr3.onrender.com";

  const [selectedModel, setSelectedModel] = useState('bilstm.pt');
  const [isLoading, setIsLoading] = useState(false);
  const [userInput, setUserInput] = useState('');
  const [predictionResult, setPredictionResult] = useState(null);
  const [page, setPage] = useState('predict'); // 'predict' or 'charts'

  const handleModelChange = async (e) => {
    const modelName = e.target.value;
    setSelectedModel(modelName);
    setPredictionResult(null);
    setUserInput('');
    setIsLoading(true);
    try {
      const response = await fetch(`${backendUrl}/setup?model=${modelName}`);
      const data = await response.json();
      console.log('Setup complete:', data);
    } catch (error) {
      console.error('Setup error:', error);
      alert('Failed to load model. Please check backend.');
    }
    setIsLoading(false);
  };

  const handlePredict = async () => {
    if (!userInput.trim()) {
      alert('Please enter some text.');
      return;
    }
    setIsLoading(true);
    try {
      const res = await fetch(`${backendUrl}/predict`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: userInput })
      });
      const data = await res.json();
      if (res.ok) {
        setPredictionResult(data);
      } else {
        alert(data.error || "Prediction failed.");
      }
    } catch (err) {
      console.error('Prediction error:', err);
      alert('Failed to connect to backend.');
    }
    setIsLoading(false);
  };

  const handleDownload = () => {
    if (!predictionResult) return;

    const logo = new Image();
    logo.src = `${window.location.origin}/logo.png`;

    logo.onload = () => {
      const pdf = new jsPDF('landscape', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();

      pdf.setFillColor(255, 255, 255);
      pdf.rect(10, 10, pageWidth - 20, 190, 'F');

      pdf.addImage(logo, 'PNG', pageWidth / 2 - 20, 20, 40, 40);
      pdf.setFontSize(22);
      pdf.setTextColor('#00ffff');
      pdf.text('News Veritas - Verification Certificate', pageWidth / 2, 75, { align: 'center' });

      const conf = (predictionResult.confidence * 100).toFixed(2);
      const fake = (predictionResult.fake_probability * 100).toFixed(2);
      const real = (predictionResult.real_probability * 100).toFixed(2);

      pdf.setFontSize(16);
      pdf.setTextColor('#000000');
      pdf.text(`Article Status: ${predictionResult.prediction}`, pageWidth / 2, 90, { align: 'center' });
      pdf.text(`Confidence: ${conf}%`, pageWidth / 2, 100, { align: 'center' });
      pdf.text(`(Fake: ${fake}% | Real: ${real}%)`, pageWidth / 2, 108, { align: 'center' });
      pdf.text(`Verified on: ${new Date().toLocaleString()}`, pageWidth / 2, 116, { align: 'center' });

      pdf.setFontSize(12);
      pdf.text('Verified Text:', 20, 135);
      const splitText = pdf.splitTextToSize(predictionResult.processed_text || userInput, pageWidth - 40);
      pdf.text(splitText, 20, 143);

      pdf.setTextColor('#888');
      pdf.text('Generated by News Veritas AI', pageWidth / 2, 190, { align: 'center' });

      pdf.save('News_Verification_Certificate.pdf');
      alert('✅ Certificate downloaded successfully!');
    };
  };

  useEffect(() => {
    handleModelChange({ target: { value: selectedModel } });
  }, []);

  return (
    <div className="container">
      <motion.div className="branding">
        <img src="/logo.png" alt="Logo" className="logo" />
        <h1 className="brand-name">News Veritas</h1>
      </motion.div>

      <motion.div className="card">
        {page === 'predict' && (
          <>
            <h1 className="title">🧠 Fake News Detection</h1>

            <div className="step">
              <label>Select a Model:</label>
              <select
                value={selectedModel}
                onChange={handleModelChange}
                className="select"
                disabled={isLoading}
              >
                <option value="bilstm.pt">BiLSTM + Attention</option>
                <option value="cnn.pt">TextCNN</option>
                <option value="lstm.pt">LSTM</option>
              </select>
            </div>

            <div className="step">
              <label>Enter News Text:</label>
              <textarea
                className="select"
                rows="5"
                value={userInput}
                onChange={(e) => setUserInput(e.target.value)}
                placeholder="Type or paste your news article here..."
                disabled={isLoading}
              />
                  
              <button onClick={handlePredict} className="btn-green" disabled={isLoading}>
                {isLoading ? <Loader2 className="spinner" /> : "🔍 Predict"}
              </button>
            </div>

            {predictionResult && (
              <motion.div
                className="result-card"
                style={{ backgroundColor: predictionResult.confidence > 0.85 ? '#dcfce7' : predictionResult.confidence > 0.6 ? '#fef9c3' : '#fee2e2' }}
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
              >
                <h3 className={predictionResult.prediction === 'FAKE' ? 'text-red' : 'text-green'}>
                  {predictionResult.prediction === 'FAKE' ? '🚨 FAKE NEWS DETECTED' : '✅ REAL NEWS'}
                </h3>
                <p><strong>Confidence:</strong> {(predictionResult.confidence * 100).toFixed(2)}%</p>
                <p className="subtext">
                  (Fake: {(predictionResult.fake_probability * 100).toFixed(2)}% | Real: {(predictionResult.real_probability * 100).toFixed(2)}%)
                </p>
                {predictionResult.negation_detected && (
                  <p className="subtext">⚠️ {predictionResult.negation_count} negation word(s) detected.</p>
                )}
                {predictionResult.processed_text && (
                  <p className="subtext">🔍 Processed Text: {predictionResult.processed_text}</p>
                )}
              </motion.div>
            )}

            {predictionResult && (
              <div style={{ marginTop: '1rem' }}>
                <button className="btn-purple" onClick={handleDownload}>
                  🎓 Download Certificate
                </button>
                <button className="btn-green" onClick={() => { setUserInput(''); setPredictionResult(null); }}>
                  🧹 Clear
                </button>
              </div>
            )}

            <div style={{ marginTop: '1rem' }}>
              <button className="btn-purple" onClick={() => setPage('charts')}>
                📊 View Training Metrics
              </button>
            </div>
          </>
        )}

        {page === 'charts' && (
          <>
            <h1 className="title">📈 Training Metrics</h1>

            <div className="image-grid">
              {[
                "training_metrics.png",
                "confusion_matrix.png",
                "roc_curve.png",
                "precision_recall_curve.png",
                "score_distribution.png",
                "cost_benefit_analysis.png"
              ].map((img, idx) => (
                <img
                  key={idx}
                  src={`${backendUrl}/static/${img}`}
                  alt={img}
                  className="chart"
                  onError={(e) => console.error(`Failed to load ${img}`, e)}
                />
              ))}
            </div>

            <button className="btn-green" style={{ marginTop: '1.5rem' }} onClick={() => setPage('predict')}>
              🔙 Back to Prediction
            </button>
          </>
        )}
      </motion.div>
    </div>
  );
}
